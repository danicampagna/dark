(5 + 3) = 8 // binop
-55555555555555555555555555555.5 = -55555555555555555555555555555.5

[test.lambda]
(let y = (fun x -> x + 1) in
 List.map_v0 [1;2;3;4] y) = [ 2; 3; 4; 5 ]

[test.lambda1]
(let x = 5 in
 let y = (fun c -> x + c) in
 let x = 6 in
 [1; 2; 3; 4] |> List.map_v0 y) = [ 6; 7; 8; 9 ]

[test.lambda2]
(String.join_v0
  (List.foreach_v0
    (String.toList_v1 "some string")
    (fun var -> String.toUppercase_v0 (String.fromChar_v1 var))) "") = "SOME STRING"

[test.lambdaFloat]
List.push_v0 [] (fun x -> -4.611686018e+18) = [(fun x -> -4.611686018e+18)]

[test.matchInt]
(match 5 with
| 5 -> "int"
| 5.6 -> "float"
| false -> "bool"
| "myStr" -> "string"
| null -> "null"
| blank -> "blank"
| Ok x -> "ok: " ++ x
| Nothing -> "constructor nothing"
| name -> name ++ "var") = "int"

[test.matchFloat]
(match 5.6 with
 | 5 -> "int"
 | 5.6 -> "float"
 | false -> "bool"
 | "myStr" -> "string"
 | null -> "null"
 | blank -> "blank"
 | Ok x -> "ok: " ++ x
 | Nothing -> "constructor nothing"
 | name -> name ++ "var") = "float"

[test.matchBool]
(match false with
 | 5 -> "int"
 | 5.6 -> "float"
 | false -> "bool"
 | "myStr" -> "string"
 | null -> "null"
 | blank -> "blank"
 | Ok x -> "ok: " ++ x
 | Nothing -> "constructor nothing"
 | name -> name ++ "var") = "bool"

[test.matchString]
(match "myStr" with
 | 5 -> "int"
 | 5.6 -> "float"
 | false -> "bool"
 | "myStr" -> "string"
 | null -> "null"
 | blank -> "blank"
 | Ok x -> "ok: " ++ x
 | Nothing -> "constructor nothing"
 | name -> name ++ "var") = "string"

[test.matchString2]
(match "otherStr" with
 | 5 -> "int"
 | 5.6 -> "float"
 | false -> "bool"
 | "myStr" -> "string"
 | null -> "null"
 | blank -> "blank"
 | Ok x -> "ok: " ++ x
 | Nothing -> "constructor nothing"
 | name -> name ++ "var") = "otherStrvar"

[test.matchNull]
(match null with
 | 5 -> "int"
 | 5.6 -> "float"
 | false -> "bool"
 | "myStr" -> "string"
 | null -> "null"
 | blank -> "blank"
 | Ok x -> "ok: " ++ x
 | Nothing -> "constructor nothing"
 | name -> name ++ "var") = "null"

[test.matchConstructorWithArg]
(match Ok "x" with
 | 5 -> "int"
 | 5.6 -> "float"
 | false -> "bool"
 | "myStr" -> "string"
 | null -> "null"
 | blank -> "blank"
 | Ok x -> "ok: " ++ x
 | Nothing -> "constructor nothing"
 | name -> name ++ "var") = "ok: x"

[test.matchEmptyConstructor]
(match Nothing with
 | 5 -> "int"
 | 5.6 -> "float"
 | false -> "bool"
 | "myStr" -> "string"
 | null -> "null"
 | blank -> "blank"
 | Ok x -> "ok: " ++ x
 | Nothing -> "constructor nothing"
 | name -> name ++ "var") = "constructor nothing"

[test.dontMatch]
(match "not matched: " with
 | 5 -> "int"
 | 5.6 -> "float"
 | false -> "bool"
 | "myStr" -> "string"
 | null -> "null"
 | blank -> "blank"
 | Ok x -> "ok: " ++ x
 | Nothing -> "constructor nothing"
 | name -> name ++ "var") = "not matched: var"

[tests.match]
(match 6 with | 5 -> "fail" | 6 -> "pass" | var -> "fail") = "pass"
(match "x" with | "y" -> "fail" | "x" -> "pass" | var -> "fail") = "pass"
(match true with | false -> "fail" | true -> "pass" | var -> "fail") = "pass"
(match 2.0 with | 1.0 -> "fail" | 2.0 -> "pass" | var -> "fail") = "pass"
(match null with | null -> "pass" | var -> "fail") = "pass"
(match 2.0 with | blank -> "fail" | 2.0 -> "pass" | var -> "fail") = "pass"
(match 999999999999999I with | 0 -> "fail" | 999999999999999I -> "pass") = "pass"

[test.pipesimple]
([] |> List.push_v0 2) = [2]

[test.pipes]
([5]
 |> List.head_v0
 |> Int.add_v0 1
 |> (+) 3
 |> blank
 |> (fun x -> if (x + 4) > 1 then x else (1 + x))) = 9

[test.pipevariable FSHARPONLY - we didn't implement this in OCaml]
(let x = fun a -> a + 1 in
 (5
 |> x
 |> x
 |> (+) 3
 |> blank)) = 10

[tests.constructors]
Nothing = Nothing
((List.head_v1 []) == Nothing) = true

[tests.incomplete_propagation]
List.head_v0 blank = blank
(if blank then 5 else 6) = blank
(List.head_v0 blank).field = blank
[ 5; 6; List.head_v0 blank ] = [ 5; 6 ]
[ 5; 6; blank] = [ 5, 6 ]
{ i = blank; m = 5; j = List.head_v0 blank; n = 6 } = { n = 6; m = 5 }
5 |> blank |> (+) 3 = 8
5 |> (+) blank |> (+) 3564 = 3569
5 |> (+) blank = 5
(let x = blank in (5 |> x)) = 5
Just blank = blank
Error blank = blank
Ok blank = blank

[tests.error]
List.map_v0 [1;2;3;4;5] (fun x y -> x) = Test.typeError_v0 "Expected 2 arguments, got 1"
Option.map2_v0 (Just 10) "not an option" (fun (a,b) -> "1") = Test.typeError_v0 "Option::map2 was called with the wrong type to parameter: option2" // OCAMLONLY
Option.map2_v0 (Just 10) "not an option" (fun (a,b) -> "1") = Test.typeError_v0 "Option::map2 was called with a String (\"not an option\"), but `option2` expected a Option." // FSHARPONLY

[fn.errorRailFn arg]
[] |> List.head_v1_ster |> (+) 3 |> (fun x -> if (x + 4) > 1 then x else (1 + x))


[tests.errorrail]
Dict.get_v1 {} "i" = Nothing
Dict.get_v1_ster {} "i" = Test.errorRailNothing_v0_ster
([5] |> List.head_v1_ster |> (+) 3 |> (fun x -> if (x + 4) > 1 then x else (1 + x))) = 8
([ ] |> List.head_v1_ster |> (+) 3 |> (fun x -> if (x + 4) > 1 then x else (1 + x))) = Test.errorRailNothing_v0
(errorRailFn null) = Nothing
(blank == Test.errorRailNothing_v0) = Test.errorRailNothing_v0
(let x = Dict.get_v1_ster {} "i" in 1) = Test.errorRailNothing_v0

[tests.errorrailPropagation]
List.push_v0 [1;2;3;4] (List.head_v1_ster []) = Test.errorRailNothing_v0_ster
// List.filter_v1 [1;2;3;4] (fun x -> List.head_v1_ster []) = Test.errorRailNothing_v0_ster
List.map_v0 [1;2;3;4] (fun x -> List.head_v1_ster []) = Test.errorRailNothing_v0_ster
List.fold_v0 [1;2;3;4] 1 (fun x y -> List.head_v1_ster []) = Test.errorRailNothing_v0_ster
List.map_v0 [1;2;3;4] (fun x -> blank) = blank
{ x = (List.head_v1_ster []) } = Test.errorRailNothing_v0_ster
Error (List.head_v1_ster []) = Test.errorRailNothing_v0_ster

[tests.shadowing]
(let x = 5 in let x = 6 in x) = 6
(let x = 35 in (match 6 with | x -> x)) = 6
(let x = 35 in (match Ok 6 with | Ok x -> x)) = 6
(let x = 35 in List.map_v0 [1;2;3;4] (fun x -> x + 2)) = [ 3; 4; 5; 6 ]
(let x = 35 in (match Ok 6 with | Ok x -> (List.map_v0 [1; 2; 3; 4] (fun x -> x + 2)))) = [ 3; 4; 5; 6]
(List.map_v0 [1;2;3;4] (fun x -> (let x = 35 in (match Ok 6 with | Ok x -> x + 2)))) = [ 8; 8; 8; 8 ]
(List.map_v0 [1;2;3;4] (fun x -> (match Ok 6 with | Ok x -> let x = 9 in x + 2))) = [ 11; 11; 11; 11 ]

[tests.records]
{ col1 = 1 ; col1 = 2 } = Test.typeError_v0 "Duplicate key: col1"
{ col1 = 1 ; col2 = 3 } = { col1 = 1 ; col2 = 3 }
{ col1 = 2 ; col2 = blank } = { col1 = 2 }
//({ col1 = 2 ; ```` = blank }) = ({ col1 = 2 }) // todo: do unit test instead
{ col1 = 2 ; col2 = Test.typeError_v0 "test" } = { col1 = 2; col2 = Test.typeError_v0 "test" }
{ col1 = 2 ; col2 = (List.head_v1_ster []) } = Test.errorRailNothing_v0_ster
(let x = { col1 = 1 } in x.fieldName) = null

[tests.list]
[] = []
[1] = [1]
[ 5; blank; 0 ] = [5;0]
[ 5; Int.add_v0 blank 5; 0 ] = [5;0]
[ 5; Test.typeError_v0 "test"; 0 ] = [ 5; Test.typeError_v0 "test"; 0 ]
[ 5; (List.head_v1_ster []); 0 ] = Test.errorRailNothing_v0


[tests.featureflag]
flag "test" true "old" "new" = "new" // show new for true
flag "test" false "old" "new" = "old" // show old for false
flag "test" blank "old" "new" = "old" // show old for incomplete condition
flag "test" null "old" "new" = "old" // show old for null
flag "test" (Test.typeError_v0 "test") "old" "new" = "old" // show old for error
flag "test" (List.head_v1_ster []) "old" "new" = "old" // show old for errorrail
flag "test" {x = true} "old" "new" = "old" // show old for object
flag "test" [true] "old" "new" = "old" // show old for list


[tests.fqfnname]
toString 5 = "5"


[tests.equality]
5 = 5
5 <> 6
5.6 = 5.6
5.6 <> 5.7
5.7 <> 6
5.7 <> 5
true = true
false = false
true <> false
null = null
null <> Nothing
null <> false
null <> 0
null <> 0.0
[ 1; 2; 3 ] = [ 1; 2; 3]
[ 1; 2; 3 ] <> [ 3; 2; 1]
{ x = 6; y = 7 } = { x = 6; y = 7 }
{ x = 6; y = 7 } = { y = 7; x = 6 }
{ x = 6; y = 7 } <> { x = 7; y = 6 }
"asd" = "asd"
"asd" <> "sad"
(Date.parse_v2 "2019-07-28T22:42:36Z") = (Date.parse_v2 "2019-07-28T22:42:36Z")
(Date.parse_v2 "2019-07-28T22:42:37Z") <> (Date.parse_v2 "2019-07-28T22:42:36Z")
String.toUUID_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2d" = String.toUUID_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2d"
String.toUUID_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2e" <> String.toUUID_v0 "3700adbc-7a46-4ff4-81d3-45afb03f6e2d"
Nothing = Nothing
Nothing <> Just Nothing
Just 5 = Just 5
Just 5 <> Just 6
Just (Just 0) <> Just (Just 1)
Just (Just 0) = Just (Just 0)
Error 0 = Error 0
Ok 0 = Ok 0
Ok 0 <> Error 0
(String.toBytes_v0 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼") = (String.toBytes_v0 "🧑🏽‍🦰🧑🏼‍💻🧑🏻‍🍼")
//(fun x -> y) = (fun x -> y) // CLEANUP: they have different IDs so they're not equal
(fun x -> let y = 1 in y) <> (fun x -> let y = 1 in x)

[db.MyDB { "x" : "Str", "y": "Str" }]
[test.db equality] with DB MyDB
MyDB = MyDB
MyDB <> 5
